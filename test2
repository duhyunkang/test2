import pandas as pd
import datetime
import pyupbit
import time
import numpy as np

# 시간 단위 200개 데이터 씩 전체 가져오는것을 함수화 (완성본)
def hour_data_load():
    end_date = None  # 현재 시간 기준으로 설정
    df_new = pd.DataFrame()
    target_time = datetime.datetime.strptime('2017-09-25 12:00:00', '%Y-%m-%d %H:%M:%S')  # 시작 데이터 시점
    i = 0

    while True:
        df = pyupbit.get_ohlcv(ticker="KRW-BTC", interval='minute60', to=end_date)
        end_date = df.index[0]
        df_new = df_new.append(df)  # df를 df_new에 합침
        time.sleep(0.5)     # 0.5초 쉬고
        print(i, end_date)  # 프로그램 running 중임을 표시
        i += 1
        # target_time 보다 작을때까지만 running
        if end_date <= target_time:
            break

    df_new = df_new.sort_index()  # 일자 기준으로 sort
    df_new.to_csv('hour_data.csv')    # csv로 저장하기

    return df_new


# 시간 단위로 가져온 전체 data를 resampling 하기_원하는 시간 기준 입력 (완성본). CSV 데이터로 가져옴
def day_resampling(hour = '9h'):    # 9시를 default로
    # csv로 시간 단위 데이터 가져오기
    df = pd.read_csv('C:\\Users\\KDH\\PycharmProjects\\bitcoin\\hour_data.csv')
    df['Unnamed: 0'] = pd.to_datetime(df['Unnamed: 0'])     # 열을 datetime으로 변경하고
    df.rename(columns={'Unnamed: 0': 'Time'}, inplace=True) # 열이름 변경하고
    df.set_index('Time', inplace=True)                # datetime 열을 index로 설정

    # 시간 단위 데이터 resampling 하기
    df_resampling = df.resample('24H', offset=hour).agg(\
                                    {'open': 'first', 'high': 'max', 'low': 'min', 'close': 'last', 'volume': 'sum'})
    # csv로 데이터 저장하기
    # df_resampling.to_csv('day_data_'+hour+'.csv')

    return df_resampling


# 일단위 데이터로 backtest
def run_backtest(ticker='KRW-BTC', fee=0.001, k=0.5, risk_rate=0.02, ma=5, hour='9h'):
    df = day_resampling(hour)
    df['range'] = (df['high'] - df['low']).shift(1)
    df['range_rate'] = (df['range'] / df['open']) * 100
    df['ma5'] = df['close'].rolling(window=ma).mean().shift(1)
    df['decision'] = np.where((df['high'] > df['open'] + df['range'] * k) & (df['high'] > df['ma5']), 'buy', np.nan)
    df['buy_price'] = np.where(df['decision'] == 'buy', df['open'] + df['range'] * k, np.nan)
    df['sell_price'] = np.where(df['decision'] == 'buy', df['close'], np.nan)
    df['buying_rate'] = np.where(risk_rate / df['range_rate'] * 100 > 1, 1, risk_rate / df['range_rate'] * 100)
    df['ror'] = np.where(df['decision'] == 'buy', (((df['sell_price'] * (1 - fee)) / \
                                                    (df['buy_price'] * (1 + fee))) - 1) * df['buying_rate'] + 1, 1)
    df['hpr'] = df['ror'].cumprod()
    df['dd'] = (df['hpr'].cummax() - df['hpr']) / df['hpr'].cummax() * 100

    days = df.index[-2] - df.index[0]
    cagr = round((df['hpr'][-2] ** (1 / (days.days / 365)) - 1) * 100, 2)
    mdd = round(df['dd'].max(), 2)

    # winning_rate & profit per loss 추가하기

    win_mask = data['ror'] > 1     # 마스크 사용
    loss_mask = data['ror'] < 1

    win_counts = win_mask.sum()   
    loss_counts = loss_mask.sum()

    buy_counts = data['decision'].value_counts()['buy']     
    winning_rate = round(win_counts/buy_counts, 2)   

    win_avg = (df.loc[win_mask, 'ror'].sum() - win_counts)/win_counts
    loss_avg = (df.loc[loss_mask, 'ror'].sum() - loss_counts)/loss_counts

    # 퍼센트 표기 및 자릿수 변경
    win_avg = round(win_avg * 100, 2)
    loss_avg = round(loss_avg * 100, 2)
    
    profit_per_loss = round(win_avg/abs(loss_avg), 2)     

    # csv로 데이터 저장하기
    # df.to_csv('backtest_'+hour+'.csv')

    # 딕셔너리로 출력값 한번에 return, CAGR, MDD, winning_rate, profit_per_loss
    return {'GACR(%)' : cagr, 'MDD(%)' : mdd, 'winning_rate' : winning_rate, 'profit_per_loss' : profit_per_loss}

    # return df



# 시간단위 모든 data 가져오기
# df = hour_data_load()

# 10시 기준으로 data_resampling
# testdata = day_resampling('10h')

# backtest 실시
# backtest_10h = run_backtest(hour='10h')
# print(backtest_10h)


# 반복문

# hpr = {}
# k_list = np.arange(0.1, 1, 0.1)
#
# for j in range(24):
#     hours = str(j)+'h'
#     for i in k_list:
#         value = run_backtest(k=i, hour=hours)
#         hpr[j, i] = value
#     j += 1
#
# df_new = pd.DataFrame(hpr)
# df_new = df_new.T
# print(df_new)
# df_new.to_excel('backtest_total_result.xlsx')
